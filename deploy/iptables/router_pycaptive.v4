################################################################################
#
#    Netfilter/IPTABLES rules for PyCaptive
#
#
#
#    Notice: 
#
#	1. Before loading this file, use "--test" in order to parse it, for
#	it might be possible that you need to load some modules for the Kernel
#	of your distro, or probably, you just need to set the "ip_forward" variable
#	at /etc/sysctl.conf:
#	
#	    $ iptables-restore --test < router_pycaptive.v4
#
#	2. Also (and VERY IMPORTANT), perform a backup of the current firewall
#	rules from your server:
#
#	    $ iptables-save > backup_rules.v4
#
#	3. The firewall rules implemented here, were based on a setup for a
#	GNU/Linux Router with a Transparent Proxy service, and the entire logic
#	of this file, WAS NOT TESTED, yet.
#
#
#    	4. Besides the logic implemented for PYCAPTIVE (*mangle and *nat tables),
#    	this file includes the Firewall setup for having a GNU/Linux Router.
#
#    	5. Instead of acting as a Router between two local networks, this GNU/Linux 
#    	Router setup is focused on a Server that provides Internet Access. So, 
#    	there are some rules described here that are different from what is usually 
#    	available on sites/forums.
#
#    	Instead of:
#
#	    *filter
#    	    -A FORWARD -i eth1 -o eth2 -m state --state RELATED,ESTABLISHED -j ACCEPT
#    	    -A FORWARD -i eth2 -o eth1 -j ACCEPT
#
#	This is what you have here:
#
#    	    *filter
#           -A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
#           -A OUTPUT -j ACCEPT
#
#    	If you have noticed flaws (possibly) regarding rules/comments, please, 
#    	I would appreciate your support (pull requests, issues, etc.), with 
#    	a detailed explanation of the flaw(s).
#
#    	P.S.:
#
#    	- Besides the Firewall setup, you need to set "net.ipv4.ip_forward=1" 
#    	on /etc/sysctl.conf, for enabling network traffic between interfaces.
#
#	- The variable above, loads (I think) default netfilter + iptables modules
#	for the Kernel, accross reboots. Worth to check the loaded modules:
#
#	    $ lsmod
#
#
#
#    Concept:
#
#    	Netfilter/IPTABLES is the engine that works behind the idea of Authenticated Internet Access
#    	that PyCaptive provides, along with the application itself, which is composed by the following stack:
#
#	    - Python
#	    - Flask (Web Framework)
#	    - MongoDB (NoSQL)
#	    - Gunicorn (WSGI)
#	    - NGINX (Web Server)
#
#
#    	Here's the logic implemented for PYCAPTIVE, from table to table:
#
#    	*mangle:
#
#      	    1. Ensure that INTERNET and PYCAPTIVE chains are created.
#      	    2. Traffic with port 80 as destination (TCP/UDP) is directed to PYCAPTIVE chain.
#      	    3. Traffic with port 443 as destination (TCP/UDP) is DROPPED.
#      	    4. Packets that traverse PYCAPTIVE chain, are directed to MARK chain, where each one receive "mark 1".
#      	    5. Packets that traverse INTERNET chain, are just ACCEPTED. (see 7. item).
#
#       *nat:
#	    6. PyCaptive interface accessible after successful authentication, escaping "NOT MARKED packets" rules
#      	    7. MARKED PACKETS: directed to NGINX <-> GUNICORN <-> PyCaptive.
#
#       *mangle:
#
#      	    8. After PyCaptive authentication (*nat table), rules are added
#      	    on top of *mangle table (per IP), with INTERNET chain as destination.
#
#
#
#    Scenario:
#
#	LAN -> eth2
#      	- network: 192.168.0.0/24 - 255.255.255.0
#      	- gateway: 192.168.0.1
#
#      	WAN -> eth1
#
#      	P.S.:
#
#       - BE SURE to adjust interfaces, netmasks, etc., according to your scenario.
#
#
#    Best regards,
#    @ivaneleoncz (ivanlmj@gmail.com)
#
#
################################################################################


################################################################################
*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
#
# PYCAPTIVE: 8. After PyCaptive authentication (*nat table), rules are added
# on top of *mangle table (per IP), with INTERNET chain as destination.
# 
# -A PREROUTING -i eth2 -s 192.168.0.22 -j INTERNET
# -A PREROUTING -i eth2 -s 192.168.0.13 -j INTERNET
# -A PREROUTING -i eth2 -s 192.168.0.123 -j INTERNET
# -A PREROUTING -i eth2 -s 192.168.0.64 -j INTERNET
# ...
#
# PYCAPTIVE: 1. Ensures that, both INTERNET and PYCAPTIVE chains exist.
-N INTERNET
-N PYCAPTIVE
# PYCAPTIVE: 2. Traffic with port 80 as destination (TCP/UDP): directed to PYCAPTIVE chain.
-A PREROUTING -i eth2 -p tcp -m tcp --dport 80 -j PYCAPTIVE
-A PREROUTING -i eth2 -p udp -m udp --dport 80 -j PYCAPTIVE
# PYCAPTIVE: 3. Traffic with port 443 as destination (TCP/UDP): DROPPED.
-A PREROUTING -i eth2 -p tcp -m tcp --dport 443 -j DROP
-A PREROUTING -i eth2 -p udp -m udp --dport 443 -j DROP
# PYCAPTIVE: 4. Packets traversing PYCAPTIVE chain: directed to MARK chain, where each one receives "mark 1".
-A PYCAPTIVE -j MARK --set-mark 1
# PYCAPTIVE: 5. Packets traversing INTERNET chain: ACCEPTED (see item 7.: PyCaptive Authentication).
-A INTERNET -j ACCEPT
COMMIT
################################################################################


################################################################################
*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEP T [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
# PYCAPTIVE: 6. PyCaptive interface accessible after successful authentication, escaping "NOT MARKED packets" rules
-A PREROUTING -i eth2 -s 192.168.0.0/24 -p tcp -d 192.168.0.1 --dport 80 -j DNAT --to-destination 192.168.0.1:14901
# PYCAPTIVE: 7. MARKED PACKETS: directed to NGINX <-> GUNICORN <-> PyCaptive.
-A PREROUTING -i eth2 -p tcp -m tcp -m mark --mark 1 -j DNAT --to-destination 192.168.0.1:14901
-A PREROUTING -i eth2 -p udp -m udp -m mark --mark 1 -j DNAT --to-destination 192.168.0.1:14901
# ROUTING: Masquerading traffic from internal non-valid IPs (LAN), to appear that the traffic was originated from the router.
-A POSTROUTING -o eth1 -j MASQUERADE
COMMIT
################################################################################


################################################################################
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
# ROUTING: Allow ICMP (Ping).
-A INPUT -p icmp -m conntrack --ctstate NEW,ESTABLISHED,RELATED --icmp-type 8 -j ACCEPT
# ROUTING: Allowing Established Connections.
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
# LOCAL: Ensure that you have SSH access to your server.
-A INPUT -i eth2 -p tcp --dport 22 -j ACCEPT
#
# ------------------------------------------------------------------------------
# From here until "-A INPUT -j REJECT": allowed traffic for specific protocols.
#
# DNS
# -A INPUT -i eth2 -p udp --dport 53 -j ACCEPT
# -A INPUT -i eth2 -p tcp --dport 53 -j ACCEPT
# EMAIL 
# -A INPUT -i eth2 -p tcp --dport 25 -j ACCEPT
# -A INPUT -i eth2 -p tcp --dport 110 -j ACCEPT
# -A INPUT -i eth2 -p tcp --dport 143 -j ACCEPT
# -A INPUT -i eth2 -p tcp --dport 993 -j ACCEPT
# -A INPUT -i eth2 [...]
# ------------------------------------------------------------------------------
#
# LOCAL: Allowing Localhost Traffic.
-A INPUT -i lo -j ACCEPT
# SECURITY: REJECT incoming connections, that are not established/related or allowed.
-A INPUT -j REJECT
# ROUTING: ACCEPT outgoing connections, from any interface.
-A OUTPUT -j ACCEPT

COMMIT
