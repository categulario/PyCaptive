#
#
#    [ example_router.v4 ]
#
#
#        Scenario:
#	   - GNU/Linux router, acting as a Gateway for an ISP Gateway,
#          requiring authentication for HTTP/HTTPS traffic for a single
#          network (configured via DHCP) from the two that are associated 
#          with its LAN interface.
#
#	 NICs:
#
#          LAN - eth2
#          - network: 192.168.0.0/24 - 255.255.255.0
#          - gateway: 192.168.0.1 (PyCaptive + DHCP)
#          -----------------------------------------
#          - network: 10.255.255.0/26 - 255.255.255.192
#          - gateway: 10.255.255.62
#
#          WAN - eth1
#          - configuration provided by ISP Gateway
#
#
#---------------------------------------------------------------------------------------------
#
#
#    IPTABLES/Netfilter workflow for PyCaptive
#
#        *mangle:
#          1. Ensures that INTERNET and PYCAPTIVE chains are created.
#          2. INTERNET: receives traffic from authorized IPs (bypassing PyCaptive).
#          3. PYCAPTIVE: receives traffic from UNauthorized IPs.
#          4. Traffic to port 80 (TCP/UDP): directed to PYCAPTIVE chain.
#          5. Traffic to port 443 (TCP/UDP): DROPPED.
#          6. Packets traversing PYCAPTIVE chain: directed and marked at MARK chain
#          7. Packets traversing INTERNET chain: ACCEPTED.
#
#        *nat:                                                                   
#          8. NOT MARKED packets: can access PyCaptive, after successful authentication.
#          9. MARKED packets: directed to NGINX -> GUNICORN -> PyCaptive.
#
#        *mangle:
#          10. Rules added on top of *mangle table, after successful authentication.
#
#

#----------------------------------------------------------------------------------------------
*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]

# PYCAPTIVE: 10. Rules added on top of *mangle table, after successful authentication.
#
# -A PREROUTING -i eth2 -s 192.168.0.22 -j INTERNET
# -A PREROUTING -i eth2 -s 192.168.0.13 -j INTERNET
# -A PREROUTING -i eth2 -s 192.168.0.123 -j INTERNET
# -A PREROUTING -i eth2 -s 192.168.0.64 -j INTERNET
# ...
#
# PYCAPTIVE: 1. Ensures that INTERNET and PYCAPTIVE chains are created.
# PYCAPTIVE: 2. INTERNET: receives traffic from authorized IPs (bypassing PyCaptive).
# PYCAPTIVE: 3. PYCAPTIVE: receives traffic from UNauthorized IPs.
-N INTERNET
-N PYCAPTIVE
# PYCAPTIVE: 4. Traffic to port 80 (TCP/UDP): directed to PYCAPTIVE chain.
-A PREROUTING -i eth2 -p tcp -m tcp --dport 80 -j PYCAPTIVE
-A PREROUTING -i eth2 -p udp -m udp --dport 80 -j PYCAPTIVE
# PYCAPTIVE: 5. Traffic to port 443 (TCP/UDP): DROPPED.
-A PREROUTING -i eth2 -p tcp -m tcp --dport 443 -j DROP
-A PREROUTING -i eth2 -p udp -m udp --dport 443 -j DROP
# PYCAPTIVE: 6. Packets traversing PYCAPTIVE chain: directed and marked at MARK chain
-A PYCAPTIVE -j MARK --set-mark 1
# PYCAPTIVE: 7. Packets traversing INTERNET chain: ACCEPTED.
-A INTERNET -j ACCEPT
COMMIT


#----------------------------------------------------------------------------------------------
*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEP T [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
# PYCAPTIVE: 8. NOT MARKED packets: can access PyCaptive, after successful authentication.
-A PREROUTING -i eth2 -s 192.168.0.0/24 -p tcp -d 192.168.0.1 --dport 80 -j DNAT --to-destination 192.168.0.1:14901
# PYCAPTIVE: 9. MARKED packets: directed to NGINX -> GUNICORN -> PyCaptive.
-A PREROUTING -i eth2 -p tcp -m tcp -m mark --mark 1 -j DNAT --to-destination 192.168.0.1:14901
-A PREROUTING -i eth2 -p udp -m udp -m mark --mark 1 -j DNAT --to-destination 192.168.0.1:14901
# ROUTING: Masquerading traffic from LAN IPs, to appear that the traffic was originated by the router.
-A POSTROUTING -o eth1 -j MASQUERADE
COMMIT


#----------------------------------------------------------------------------------------------
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
# ROUTING: ICMP (Ping) for NEW, ESTABLISHED, RELATED (associated with existent connections)
-A INPUT -p icmp -m conntrack --ctstate NEW,ESTABLISHED,RELATED --icmp-type 8 -j ACCEPT
# ROUTING: Established Connections for specific protocols,
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
# SERVICE: Localhost Traffic
-A INPUT -i lo -j ACCEPT
# SERVICE: SSH
-A INPUT -i eth2 -p tcp --dport 22 -j ACCEPT
# SERVICE: DNS
-A INPUT -i eth2 -p udp --dport 53 -j ACCEPT
-A INPUT -i eth2 -p tcp --dport 53 -j ACCEPT
# SERVICE: DHCP
-A INPUT -i eth2 -p udp --dport 67 --sport 68 -j ACCEPT                         
-A INPUT -i eth2 -p udp --dport 68 --sport 67 -j ACCEPT 

# Allowing traffic for other services.
# 
# -A INPUT -i eth2 -p tcp --dport 25 -j ACCEPT
# -A INPUT -i eth2 -p tcp --dport 110 -j ACCEPT
# -A INPUT -i eth2 -p tcp --dport 143 -j ACCEPT
# -A INPUT -i eth2 -p tcp --dport 993 -j ACCEPT
# -A INPUT -i eth2 [...]

# SECURITY: REJECT incoming connections, that are not established/related or allowed.
-A INPUT -j REJECT
# ROUTING: ACCEPT outgoing connections, from any interface.
-A OUTPUT -j ACCEPT
COMMIT
