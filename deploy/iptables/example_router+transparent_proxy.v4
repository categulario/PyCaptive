#
#
#    [ example_router+transparent_proxy.v4 ]
#
#
#        Scenario:
#
#          - GNU/Linux router, acting as DNS server and Gateway for an ISP Gateway,
#          requiring authentication for HTTP/HTTPS traffic originated from a single
#          network, configured via DHCP (other network configured statically), also
#          performing the Transparent Proxy role.
#
#	 NICs:
#
#          LAN - eth2
#          - network: 192.168.0.0/24 - 255.255.255.0
#          - gateway: 192.168.0.1 (DNS + DHCP + PyCaptive + Transparent Proxy)
#          -----------------------------------------
#          - network: 10.255.255.0/26 - 255.255.255.192
#          - gateway: 10.255.255.62 (DNS + Static IP Configuration)
#
#          WAN - eth1
#          - configuration provided by ISP Gateway
#
#
#---------------------------------------------------------------------------------------------
#
#
#    IPTABLES/Netfilter workflow for PyCaptive with Transparent Proxy
#
#
#        *mangle:
#          1. Ensures that INTERNET and PYCAPTIVE chains are created.
#          2. INTERNET: receives traffic from authorized IPs (bypassing PyCaptive).
#          3. PYCAPTIVE: receives traffic from UNauthorized IPs.
#          4. Traffic to port 80 (TCP/UDP): directed to PYCAPTIVE chain.
#          5. Traffic to port 443 (TCP/UDP): DROPPED.
#          6. Packets traversing PYCAPTIVE chain: directed and marked at MARK chain
#          7. Packets traversing INTERNET chain: ACCEPTED.
#
#        *nat:                                                                   
#          8. MARKED packets: directed to NGINX -> GUNICORN -> PyCaptive.
#
#        *mangle:
#          9. Rules added on top (after successful authentication), have INTERNET access.
#
#        *nat:
#          10. NOT MARKED packets to PyCaptive: access, after successful authentication.
#          11. NOT MARKED packets to port 80: directed to Transparent Proxy.
#

#----------------------------------------------------------------------------------------------
*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]

# PYCAPTIVE: 9. Rules added on top (after successful authentication), have INTERNET access.
#                                                                                
# -A PREROUTING -i eth2 -s 192.168.0.22 -j INTERNET                             
# -A PREROUTING -i eth2 -s 192.168.0.13 -j INTERNET 
# -A PREROUTING -i eth2 -s 192.168.0.123 -j INTERNET                            
# -A PREROUTING -i eth2 -s 192.168.0.64 -j INTERNET 
# ...
# PYCAPTIVE: 1. Ensures that INTERNET and PYCAPTIVE chains are created.           
# PYCAPTIVE: 2. INTERNET: receives traffic from authorized IPs (bypassing PyCaptive).
# PYCAPTIVE: 3. PYCAPTIVE: receives traffic from UNauthorized IPs.
-N INTERNET
-N PYCAPTIVE
# PYCAPTIVE: 4. Traffic to port 80 (TCP/UDP): directed to PYCAPTIVE chain
# - some IPs (Router, APs, etc.) must bypass the authentication (--src-range)
-A PREROUTING -i eth2 -m iprange --src-range 192.168.0.10-192.168.0.254 -p tcp -m tcp --dport 80 -j PYCAPTIVE
-A PREROUTING -i eth2 -m iprange --src-range 192.168.0.10-192.168.0.254 -p udp -m udp --dport 80 -j PYCAPTIVE
# PYCAPTIVE: 5. Traffic to port 443 (TCP/UDP): DROPPED.
# - some IPs (Router, APs, etc.) must bypass the authentication (--src-range)
-A PREROUTING -i eth2 -m iprange --src-range 192.168.0.10-192.168.0.254 -p tcp -m tcp --dport 443 -j DROP
-A PREROUTING -i eth2 -m iprange --src-range 192.168.0.10-192.168.0.254 -p udp -m udp --dport 443 -j DROP
# PYCAPTIVE: 6. Packets traversing PYCAPTIVE chain: directed and marked at MARK chain
-A PYCAPTIVE -j MARK --set-mark 1
# PYCAPTIVE: 7. Packets traversing INTERNET chain: ACCEPTED.
-A INTERNET -j ACCEPT
COMMIT

#---------------------------------------------------------------------------------------------
*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]

# LOGGING: HTTP Traffic
-A PREROUTING -i eth2 -s 10.255.255.0/26 -p tcp -m tcp --dport 80 -m limit --limit 30/sec -j LOG --log-prefix "[netfilter-p80-tcp-10] " --log-level 7
-A PREROUTING -i eth2 -s 10.255.255.0/26 -p udp -m udp --dport 80 -m limit --limit 30/sec -j LOG --log-prefix "[netfilter-p80-udp-10] " --log-level 7
-A PREROUTING -i eth2 -s 192.168.0.0/24 -p tcp -m tcp --dport 80 -m limit --limit 30/sec -j LOG --log-prefix "[netfilter-p80-tcp-192] " --log-level 7
-A PREROUTING -i eth2 -s 192.168.0.0/24 -p udp -m udp --dport 80 -m limit --limit 30/sec -j LOG --log-prefix "[netfilter-p80-udp-192] " --log-level 7
# LOGGING: HTTPS Traffic
-A PREROUTING -i eth2 -s 10.255.255.0/26 -p tcp -m tcp --dport 443 -m limit --limit 30/sec -j LOG --log-prefix "[netfilter-p443-tcp-10] " --log-level 7
-A PREROUTING -i eth2 -s 10.255.255.0/26 -p udp -m udp --dport 443 -m limit --limit 30/sec -j LOG --log-prefix "[netfilter-p443-udp-10] " --log-level 7
-A PREROUTING -i eth2 -s 192.168.0.0/24 -p tcp -m tcp --dport 443 -m limit --limit 30/sec -j LOG --log-prefix "[netfilter-p443-tcp-192] " --log-level 7
-A PREROUTING -i eth2 -s 192.168.0.0/24 -p udp -m udp --dport 443 -m limit --limit 30/sec -j LOG --log-prefix "[netfilter-p443-udp-192] " --log-level 7
# PYCAPTIVE: 8. MARKED packets: directed to NGINX -> GUNICORN -> PyCaptive.
-A PREROUTING -i eth2 -p tcp -m tcp -m mark --mark 1 -j DNAT --to-destination 192.168.0.1:14091
-A PREROUTING -i eth2 -p udp -m udp -m mark --mark 1 -j DNAT --to-destination 192.168.0.1:14091
# PYCAPTIVE: 10. NOT MARKED packets to PyCaptive: access, after successful authentication.
-A PREROUTING -i eth2 -s 192.168.0.0/24 -p tcp -d 192.168.0.1 --dport 80 -j DNAT --to-destination 192.168.0.1:14901
# PYCAPTIVE: 11. NOT MARKED packets to port 80: directed to Transparent Proxy.
-A PREROUTING -i eth2 -s 10.255.255.0/26 -p tcp --dport 80 -j DNAT --to-destination 10.255.255.62:3128
-A PREROUTING -i eth2 -s 192.168.0.0/24 -p tcp --dport 80 -j DNAT --to-destination 192.168.0.1:3128
# ROUTING: Masquerading traffic from LAN IPs, to appear that the traffic was originated by the router.
-A POSTROUTING -o eth1 -j MASQUERADE
# PROXY: Incoming traffic with source port 80 -> redirecting to SQUID
-A PREROUTING -i eth1 -p tcp --sport 80 -j REDIRECT --to-port 3128
COMMIT

#----------------------------------------------------------------------------------------------
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
# ROUTING: ICMP (Ping) for NEW, ESTABLISHED, RELATED (associated with existent connections)
-A INPUT -p icmp -m conntrack --ctstate NEW,ESTABLISHED,RELATED --icmp-type 8 -j ACCEPT
# ROUTING: Established Connections for specific protocols
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
# SERVICE: Localhost Traffic
-A INPUT -i lo -j ACCEPT
# SERVICE: SSH
-A INPUT -i eth1 -p tcp --dport 22 -j ACCEPT
-A INPUT -i eth2 -p tcp --dport 22 -j ACCEPT
# SERVICE: DNS
-A INPUT -i eth2 -p udp --dport 53 -j ACCEPT
-A INPUT -i eth2 -p tcp --dport 53 -j ACCEPT
# SERVICE: DHCP
-A INPUT -i eth2 -p udp --dport 67 --sport 68 -j ACCEPT
-A INPUT -i eth2 -p udp --dport 68 --sport 67 -j ACCEPT
# SERVICE: RNDC (Remote Name Daemon Control) for DNS administration
-A INPUT -i eth2 -p udp --dport 953 -j ACCEPT
-A INPUT -i eth2 -p tcp --dport 953 -j ACCEPT

# Allowing traffic for other services.                                          
#                                                                               
# -A INPUT -i eth2 -p tcp --dport 25 -j ACCEPT                                  
# -A INPUT -i eth2 -p tcp --dport 110 -j ACCEPT                                 
# -A INPUT -i eth2 -p tcp --dport 143 -j ACCEPT                                 
# -A INPUT -i eth2 -p tcp --dport 993 -j ACCEPT                                 
# -A INPUT -i eth2 [...] 

# LOGGING: incoming traffic not allowed above.
-A INPUT -i eth2 -m limit --limit 1/min -j LOG --log-prefix "[netfilter-drop-in-lan] " --log-level 7
-A INPUT -i eth1 -m limit --limit 1/min -j LOG --log-prefix "[netfilter-drop-in-wan] " --log-level 7
# SECURITY: REJECT not ESTABLISHED,RELATED or ACCEPTED incoming connections.
-A INPUT -j REJECT
# ROUTING: ACCEPT outgoing connections, from any interface.
-A OUTPUT -j ACCEPT
COMMIT
